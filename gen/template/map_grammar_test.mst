/*
 * このファイルはdoc/createMapGrammarTemplate.jsによって自動生成されています。
 * 編集は行わないでください。
 */
using System;
using Xunit;
using Bve5_Parsing.MapGrammar;
using Bve5_Parsing.MapGrammar.EvaluateData;
using static Bve5_ParsingTests.MapGrammarTestUtility;
using System.Collections.Generic;

namespace Bve5_ParsingTests
{
    public class MapGrammarSyntaxTests
    {

        #region 各構文のテスト
{{#states}}

        /// <summary>
        /// {{elem}}{{^syntax1}}[{{key}}]{{/syntax1}}{{#syntax3}}.{{sub_elem}}{{/syntax3}}{{^nofunc}}.{{func}}{{/nofunc}}({{#args}}{{name}}{{#opt}}?{{/opt}}{{^last}}, {{/last}}{{/args}});
        /// </summary>
        [Fact]
        public void {{elem}}{{#syntax3}}{{sub_elem}}{{/syntax3}}{{^nofunc}}{{func}}{{/nofunc}}Test()
        {
{{#skip_test}}
            /*
             * THIS TEST IS SKIPPED.
             * この構文のテストは諸事情によりテストの自動生成から外されました。
             * {{elem}}{{^syntax1}}[{{key}}]{{/syntax1}}{{#syntax3}}.{{sub_elem}}{{/syntax3}}{{^nofunc}}.{{func}}{{/nofunc}}({{#args}}{{name}}{{#opt}}?{{/opt}}{{^last}}, {{/last}}{{/args}})構文のテストは手動で作成してください。
             */
{{/skip_test}}
{{^skip_test}}
{{#argPattern}}

            // {{../elem}}{{^../syntax1}}[{{../key}}]{{/../syntax1}}{{#../syntax3}}.{{../sub_elem}}{{/../syntax3}}{{^../nofunc}}.{{../func}}{{/../nofunc}}({{#args}}{{name}}{{^last}}, {{/last}}{{/args}});
            Check(
{{#useV2Parser}}
                ExecParse("BveTs Map {{version}}\n0;{{../elem}}{{^../syntax1}}['{{../key}}']{{/../syntax1}}{{#../syntax3}}.{{../sub_elem}}{{/../syntax3}}{{^../nofunc}}.{{../func}}{{/../nofunc}}({{#args}}{{^is_list}}{{{test_value_map_grammar}}}{{/is_list}}{{#is_list}}{{#inner_arguments}}{{{test_value_map_grammar}}}{{^last}}, {{/last}}{{/inner_arguments}}{{/is_list}}{{^last}}, {{/last}}{{/args}});"),
{{/useV2Parser}}
{{#useV1Parser}}
                ExecParse("BveTs Map {{version}}\n0;{{../elem}}{{^../syntax1}}[{{../key}}]{{/../syntax1}}{{#../syntax3}}.{{../sub_elem}}{{/../syntax3}}{{^../nofunc}}.{{../func}}{{/../nofunc}}({{#args}}{{^is_list}}{{{test_value_map_grammar_non_quote}}}{{/is_list}}{{#is_list}}{{#inner_arguments}}{{{test_value_map_grammar_non_quote}}}{{^last}}, {{/last}}{{/inner_arguments}}{{/is_list}}{{^last}}, {{/last}}{{/args}});"),
{{/useV1Parser}}
                new MapData(
                    version: "{{version}}",
                    syntaxes: new List<Statement>()
                    {
                        new {{../elem}}{{#../syntax3}}{{../sub_elem}}{{/../syntax3}}{{^../nofunc}}{{../func}}{{/../nofunc}}Statement(0)
                        {
{{#../key}}
                            Key = "{{../../key}}",
{{/../key}}
{{#args}}
{{^is_list}}
                            {{name}} = {{{test_value_csharp}}}{{^last}},{{/last}}
{{/is_list}}
{{/args}}
                        }
{{#args}}
{{#is_list}}
                        .Set{{name}}s({{#inner_arguments}}{{{test_value_csharp}}}{{^last}}, {{/last}}{{/inner_arguments}})
{{/is_list}}
{{/args}}
                    }));
{{/argPattern}}
{{/skip_test}}
        }
{{/states}}
        #endregion
    }
}
